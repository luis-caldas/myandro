#!/sbin/sh

# Essential vars
OUT_PROCESS=/proc/self/fd/$2
ZIP_FILE="$3"

#############
# Functions #
#############

ui_print() {
	until [ ! "$1" ]; do
		# shellcheck disable=SC2039
		echo -e "ui_print $1\n" >> "$OUT_PROCESS"
		shift
	done
}

show_progress() {
	amount=$1
	if [ -n "${1##*[!0-9]*}" ]; then
		amount=$(echo "0.0134 $1 * p" | dc)
		echo "progress $amount $2" >> "$OUT_PROCESS"
	fi
}
set_progress() {
	amount=$1
	if [ -n "${1##*[!0-9]*}" ]; then
		amount=$(echo "0.0134 $1 * p" | dc)
		echo "set_progress $amount" >> "$OUT_PROCESS"
	fi
}

get_block_for_mount_point() {
	grep -v "^#" /etc/recovery.fstab | grep "[[:blank:]]$1[[:blank:]]" | tail -n1 | tr -s "[:blank:]" ' ' | cut -d' ' -f1
}

find_block() {
	name="$1"
	fstab_entry=$(get_block_for_mount_point "/$name")

	# Find partitions
	dynamic=$(getprop ro.boot.dynamic_partitions)
	if [ "$dynamic" = "true" ]; then
		block_path="/dev/block/mapper"
	else
		block_path="/dev/block/bootdevice/by-name"
	fi
	current_slot=$(getprop ro.boot.slot_suffix)
	if [ -n "$current_slot" ]; then
		if [ "$current_slot" = "_a" ]; then
			slot_suffix="_a"
		else
			slot_suffix="_b"
		fi
	fi

	# P-SAR hacks
	[ -z "$fstab_entry" ] && [ "$name" = "system" ] && fstab_entry=$(get_block_for_mount_point "/")
	[ -z "$fstab_entry" ] && [ "$name" = "system" ] && fstab_entry=$(get_block_for_mount_point "/system_root")

	dev=""
	if [ "$dynamic" = "true" ]; then
		if [ -n "$fstab_entry" ]; then
			dev="${block_path}/${fstab_entry}${slot_suffix}"
		else
			dev="${block_path}/${name}${slot_suffix}"
		fi
	else
		if [ -n "$fstab_entry" ]; then
			dev="${fstab_entry}${slot_suffix}"
		else
			dev="${block_path}/${name}${slot_suffix}"
		fi
	fi

	if [ -b "$dev" ]; then
		echo "$dev"
	fi
}

########
# Main #
########

main() {

	ui_print " "
	ui_print "/------------\\ "
	ui_print "| Installing |"
	ui_print "\\------------/"
	ui_print " "

	# Some warning
	ui_print "*** This process is destructive ***"
	ui_print " "

	# Needed vars
	pack_out="/pack"
	files="$pack_out/files"
	system_mount="/mnt/system"
	product_mount="/product"

	# Mounting
	umount "$system_mount" || true
	umount "$product_mount" || true
	system_block=$(find_block "system")
	product_block=$(find_block "product")
	mkdir -p "$system_mount" || true
	if mount -o rw "$system_block" "$system_mount"; then
		ui_print "$system_mount mounted"
	else
		ui_print "Unable to mount $system_mount"
		exit 1
	fi
    if [ -L "$system_mount/product" ]; then
		product_block=""
    fi
    if [ -n "$product_block" ]; then
		mkdir -p "$product_mount" || true
		if mount -o rw "$product_block" "$product_mount"; then
			ui_print "$product_mount mounted"
		else
			ui_print "Unable to mount $product_mount"
			exit 1
		fi
	fi

	# Extract our pack
	rm -rf "$pack_out"
	mkdir -p "$pack_out"
	unzip -o -d "$pack_out" "$ZIP_FILE"

	# Copy what needs to be copied
	# Boot animation
	cp -f "$files/media/bootanimation.zip" "$system_mount/system/product/media/."
	# Certificates
	cp -f "$files/certs/"* "$system_mount/system/etc/security/cacerts/."
	# Sounds and alarms
	cp -f "$files/media/sounds/notifications/"* "$system_mount/system/product/media/audio/notifications/."
	cp -f "$files/media/sounds/other/"* "$system_mount/system/product/media/audio/alarms/."
	cp -f "$files/media/sounds/other/"* "$system_mount/system/product/media/audio/ringtones/."

	# Overwrite the needed fonts
	local_fonts="$files/fonts"
	fonts_path="$system_mount/system/fonts"
	# Remove asian fonts for the size
	rm -f "$fonts_path/NotoSerifCJK-Regular.ttc"
	ln -s "NotoSansCJK-Regular.ttc" "$fonts_path/NotoSerifCJK-Regular.ttc"
	# Remove old fonts if present
	rm -f "$fonts_path/sans.ttf"
	rm -f "$fonts_path/mono.ttf"
	# Remove fonts that will be replaced
	rm -f "$fonts_path/Roboto-Regular.ttf"
	rm -f "$fonts_path/NotoSerif-Regular.ttf"
	rm -f "$fonts_path/NotoSerif-Bold.ttf"
	rm -f "$fonts_path/NotoSerif-Italic.ttf"
	rm -f "$fonts_path/NotoSerif-BoldItalic.ttf"
	rm -f "$fonts_path/DroidSansMono.ttf"
	rm -f "$fonts_path/CutiveMono.ttf"
	# Copy the local fonts
	cp -f "$local_fonts/sans.ttf" "$fonts_path/."
	cp -f "$local_fonts/mono.ttf" "$fonts_path/."
	# Link all the needed fonts
	ln -s "sans.ttf" "$fonts_path/Roboto-Regular.ttf"
	ln -s "sans.ttf" "$fonts_path/NotoSerif-Regular.ttf"
	ln -s "sans.ttf" "$fonts_path/NotoSerif-Bold.ttf"
	ln -s "sans.ttf" "$fonts_path/NotoSerif-Italic.ttf"
	ln -s "sans.ttf" "$fonts_path/NotoSerif-BoldItalic.ttf"
	ln -s "mono.ttf" "$fonts_path/DroidSansMono.ttf"
	ln -s "mono.ttf" "$fonts_path/CutiveMono.ttf"

	ui_print " "

	ui_print " "
	ui_print "Copied all needed files"
	ui_print " "

	ui_print "/----------\\ "
	ui_print "| All Done |"
	ui_print "\\----------/"
	ui_print " "
}

main "$@"
